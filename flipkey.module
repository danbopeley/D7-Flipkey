<?php
/**
 * Define Module Constants
 */
define("FLIPKEY_MODULE_PATH", drupal_get_path( 'module', 'flipkey' ));
define("FLIPKEY_BASE_URL_FEEDS", 'data.flipkey.com/feeds/reviews_remoteid');

//Module Include Files.
include_once( FLIPKEY_MODULE_PATH. '/includes/flipkey.class.inc' );


/**
 * Hook Menu
 */
function flipkey_menu() {
	$items = array();

	$items['admin/config/services/flipkey'] = array(
		'title'            => 'FlipKey Reviews Configuration',
		'page callback'    => 'drupal_get_form',
		'page arguments'   => array('flipkey_admin_settings'),
		'access callback'  => 'user_access',
		'access arguments' => array('administer site configuration'),
		'description'      => 'Configure Flipkey.',
		'file'             => 'flipkey.admin.inc',
		'type'             => MENU_NORMAL_ITEM,
	);

	$items['admin/config/services/flipkey/configure'] = array(
		'title'  => 'Flipkey Reviews Configuration',
		'type'   => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 10,
	);


	$items['flipkey/update/all'] = array(
		'page callback'     => '_flipkey_manual_update',
		'type'              => MENU_CALLBACK,
		'access arguments'  => array('administer site configuration'),
	);

	$items['admin/config/services/flipkey/tools'] = array(
		'title'            => 'Flipkey Tools',
		'page callback'    => 'drupal_get_form',
		'page arguments'   => array('flipkey_admin_tools'),
		'access callback'  => 'user_access',
		'access arguments' => array('administer site configuration'),
		'description'      => 'FLipkey Tools.',
		'file'             => 'flipkey.tools.inc',
		'type'             => MENU_LOCAL_TASK,
		'weight'           => 20,
	);
	$items['admin/vrweb/flipkey'] = array(
		'title'            => 'FlipKey',
		'page callback'    => 'drupal_get_form',
		'page arguments'   => array('flipkey_admin_settings'),
		'access arguments' => array('administer vrweb'),
		'description'      => 'Configure Flipkey.',
		'file'             => 'flipkey.admin.inc',
		'type'             => MENU_NORMAL_ITEM,
	);
	// Default local task for general settings form.
	$items['admin/vrweb/flipkey/default'] = array(
		'title' => 'Flipkey Config',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 40,
	);
	$items['admin/vrweb/flipkey/tools'] = array(
		'title'            => 'Flipkey Tools',
		'page callback'    => 'drupal_get_form',
		'page arguments'   => array('flipkey_admin_tools'),
		'access arguments' => array('administer vrweb'),
		'description'      => 'FLipkey Tools.',
		'file'             => 'flipkey.tools.inc',
		'type'             => MENU_LOCAL_TASK,
		'weight'           => 50,
	);

	return $items;
	}


function flipkey_preprocess_flipkey_widget(&$vars) {

  $vars['widget']['stats']['data'] = array(
      'width' => flipkey::_calculateRating(123, $vars['widget']['stats']['rating']),
      'max'   => 5,
  );

  //Loop through The reviews, and add in parameters for overall_rating information.
  foreach ($vars['widget']['reviews'] as $key => $review) {
    $vars['widget']['reviews'][$key]['data'] = array(
        'width' => flipkey::_calculateRating(100, $review['rating']),
        'max'   => 5,
    );
  }
}


/**
 * Implements hook_theme_registry_alter()
 **/
function flipkey_theme_registry_alter(&$theme_registry) {
	$mod_path = drupal_get_path('module', 'flipkey') . '/templates';
	$theme_registry_copy = $theme_registry;       // munge on a copy
	_theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'flipkey', $mod_path);
	$theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}


function flipkey_cron() {
	$cron_enabled = variable_get('flipkey_cron_switch', 0);
	if ($cron_enabled) {
		_flipkey_import_reviews();
	}
}


function _flipkey_manual_update() {
  _flipkey_import_reviews();
}

function _flipkey_import_reviews() {
	$flipkey_property_id_key = variable_get('flipkey_property_id_key', NULL);
	$flipkey_review_key = variable_get('flipkey_review_key', NULL);
	$threshold = (int) variable_get('flipkey_import_threshold',10);
	$ntypeskeyed = variable_get('flipkey_node_types',NULL);
	$lun = variable_get('flipkey_last_updated_node',0);
	$ntypes = array_values($ntypeskeyed);
	$mess = array();
	$mess_err = array();

	$result = db_query("SELECT n.nid, n.title
	FROM {node} n
	WHERE n.type IN (:nt)
	AND
	n.nid > :lun
	ORDER BY nid ASC
	LIMIT $threshold", array(':nt' => $ntypes ,':lun' => $lun));

	$properties = $result->fetchAll();
	$propcount = $result->rowCount();


	if($flipkey_property_id_key && $flipkey_review_key){
		foreach ($properties as $prop) {
			$cur_pnid = (int) $prop->nid;
			$cur_tit = $prop->title;
			if($cur_pnid > $lun){
				$cur_node = node_load($cur_pnid, NULL, TRUE);

				if(strstr($flipkey_property_id_key,'field')){
					$item = field_get_items('node', $cur_node, $flipkey_property_id_key);
					$cur_prid = $item[0]['value'];
				}else if($flipkey_property_id_key == 'title'){
					$cur_prid = $cur_node->title;
				}

				if($cur_prid){
					$cur_prid = str_replace("'",'', $cur_prid);
					$imported_review_json = flipkey::_importFlipkeyReview($cur_prid);

					if(is_array($imported_review_json) && isset($imported_review_json['error'])) {

						switch($imported_review_json['error']) {
							case'No Reviews':
								$mess_err[] = $cur_tit . ' | ' . $cur_pnid . ' | ' . $cur_prid . ' | no reviews<br />';
							break;
							case'Response Error':
								$mess_err[] = $cur_tit . ' | ' . $cur_pnid . ' | ' . $cur_prid . ' | Response Error<br />';
							break;
							case'Request Error':
								$mess_err[] = $cur_tit . ' | ' . $cur_pnid . ' | ' . $cur_prid . ' | Request Error<br />';
							break;
							case'Configuration Error':
								$mess_err[] = $cur_tit . ' | ' . $cur_pnid . ' | ' . $cur_prid . ' | Configuration Error<br />';
							break;
							default:
								$mess_err[] = $cur_tit . ' | ' . $cur_pnid . ' | ' . $cur_prid . ' | ' . $imported_review_json['error'] . '<br />';
							break;
						}

					}else{

						$imported_review_decoded = json_decode($imported_review_json, true);
						$reviewcount = $imported_review_decoded['stats']['reviewcount'];
						$cur_node->{$flipkey_review_key}[$cur_node->language][0]['value'] = $imported_review_json;
						node_save($cur_node);
						$mess[] = $cur_tit.' | '.$cur_pnid.' | '.$cur_prid.' | '.$reviewcount.' reviews<br />';
					}

				}else{
					$mess_err[] = $cur_tit.' | '.$cur_pnid.' | No Flipkey Property ID available for this node.<br />';
				}
			}
		}

	}else{
		$configmess = '';
		if(!$flipkey_property_id_key){
			$configmess .= 'Please ensure that you have defined the field storing the Flipkey property ID<br />';
		}
		if(!$flipkey_review_key){
			$configmess .= 'Please ensure that you have defined the field storing in which the Flipkey review is to be stored.<br />';
		}
		drupal_set_message($configmess);
	}

	if($propcount != $threshold){
		variable_set('flipkey_last_updated_node', 0);
	}else{
		variable_set('flipkey_last_updated_node', $cur_pnid);
	}

	/*
	if this was a manual update then find destination, set mess, and goto destination
	to return to flipkey admin panel
	*/
	if ($_GET['destination']) {
		if(is_array($mess)){
			$messstr = implode('',$mess);
		}
		if(is_array($mess_err)){
			$messerrstr = implode('',$mess_err);
		}

		$mess = t('<table style="border:solid 1px #000000;"><tr><td valign="top">The following properties were updated successfully:<br />'.$messstr.'</td></tr></table>');
		$mess2 = t('<table style="border:solid 1px #000000;"><tr><td valign="top">The following properties did not:<br />'.$messerrstr.'</td></tr></table>');
		drupal_set_message($mess);
		drupal_set_message($mess2);
		drupal_goto($_GET['destination']);
	}
}

function flipkey_execute_individual_update($nid){
	$cur_node = node_load($nid);
	$flipkey_property_id_key = variable_get('flipkey_property_id_key', NULL);
	$flipkey_review_key = variable_get('flipkey_review_key', NULL);
	$cur_prid = FALSE;
	if(strstr($flipkey_property_id_key,'field')){
		$item = field_get_items('node', $cur_node, $flipkey_property_id_key);
		$cur_prid = $item[0]['value'];
	}else if($flipkey_property_id_key == 'title'){
		$cur_prid = $cur_node->title;
	}

	if($cur_prid){
		$cur_prid = str_replace("'",'', $cur_prid);
		$imported_review = flipkey::_importFlipkeyReview($cur_prid);

		if(is_array($imported_review) && $imported_review['error']){
			switch($imported_review['error']){
				case'No Reviews':
					drupal_set_message(t("There are no reviews for this property."), 'warning');
					break;
				case'Response Error':
					drupal_set_message(t("Flipkey Returned a 'RESPONSE ERROR'. It is likely the flipkey Property ID id incorrect."), 'warning');
					break;
				case'Request Error':
					drupal_set_message(t("Flipkey returned an Invalid Request Error."), 'warning');
					break;
				case'Configuration Error':
					drupal_set_message(t("The Flipkey module appears to NOT be configured correctly. Ensure that the API Key and Front Desk ID are configured correctly."), 'warning');
					break;
			}
		}else{
			$cur_node->{$flipkey_review_key}[$cur_node->language][0]['value'] = $imported_review;
			node_save($cur_node);
			$title = $cur_node->title;
			drupal_set_message(t("Property Reviews for $title have been updated."), 'status');
		}

	}
}

function flipkey_entity_view( $entity, $type, $view_mode, $langcode ) {

	switch ($type) {
		case 'node':
			$ntypeskeyed = variable_get('flipkey_node_types',NULL);
			if($ntypeskeyed) {
				$ntypes = array_values($ntypeskeyed);
				if (in_array($entity->type, $ntypes)) {
					$flipkey_review_key = variable_get('flipkey_review_key', NULL);
					$flipkey_star_key = variable_get('flipkey_star_key', 'field_flipkey_stars');
					$entity->content[$flipkey_review_key] = array(
						'#theme' => 'flipkey_reviews',
						'#entity' => $entity,
						'#template' => 'flipkey-widget',
						'#review_field_key' => $flipkey_review_key
					);



					$entity->content[$flipkey_star_key] = array(
						'#theme' => 'flipkey_stars',
						'#entity' => $entity,
						'#template' => 'flipkey-stars-widget',
						'#star_field_key' => $flipkey_star_key,
						'#review_field_key' => $flipkey_review_key
					);

				}
			}
			break;
	}
}

/**
 * Implements hook_theme().
 */
function flipkey_theme() {

	$return = array();
	$return['flipkey_reviews'] = array(
		'render element' => 'element',
		'file' => 'flipkey.theme.inc',
		'template' => 'templates/flipkey-widget',
	);
	$return['flipkey_stars'] = array(
		'render element' => 'element',
		'file' => 'flipkey.theme.inc',
		'template' => 'templates/flipkey-stars-widget',
	);

	return $return;
}


function flipkey_local_reviews($nid){
	$local_reviews_enabled = false;
	$display_local_reviews = true;
	if(module_exists('trt_local_reviews')){
		$local_reviews_enabled = true;
	}
	//insert local reviews
	if($display_local_reviews && $local_reviews_enabled && $nid) {

		$query = new EntityFieldQuery();

		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'local_review')
			->propertyCondition('status', NODE_PUBLISHED)
			->fieldCondition('field_local_review_property', 'target_id', $nid, '=')
			->addMetaData('account', user_load(1)); // Run the query as user 1.

		$result = $query->execute();

		if (isset($result['node'])) {
			$local_review_nids = array_keys($result['node']);
			$local_reviews = entity_load('node', $local_review_nids);

			if(!empty($local_reviews)) {
				$local_review_arr = array();
				foreach ($local_reviews as $i => $lr) {

					$width = flipkey::_calculateRating(100, $lr->field_local_review_rating[LANGUAGE_NONE][0]['value']);
					if(isset($lr->field_local_review_managertext[LANGUAGE_NONE])){
						$mgrtext = $lr->field_local_review_managertext[LANGUAGE_NONE][0]['value'];
						if(isset($lr->field_local_review_mgrdate[LANGUAGE_NONE])){
							$mgrdate = $lr->field_local_review_mgrdate[LANGUAGE_NONE][0]['value'];
						}else{
							$mgrdate = '';
						}
					}else{
						$mgrtext = '';
						$mgrdate = '';
					}
					$lr_item = array(
						'@attributes' => array('type' => 'struct'),
						'id' => $lr->nid,
						'username' => $lr->field_local_review_username[LANGUAGE_NONE][0]['value'],
						'userlocation' => $lr->field_local_review_userlocation[LANGUAGE_NONE][0]['value'],
						'title' => $lr->title,
						'date' => $lr->field_local_review_date[LANGUAGE_NONE][0]['value'],
						'fdate' => date('m/d/Y', $lr->field_local_review_date[LANGUAGE_NONE][0]['value']),
						'text' => $lr->field_local_review_text[LANGUAGE_NONE][0]['value'],
						'displayname' => $lr->field_local_review_displayname[LANGUAGE_NONE][0]['value'],
						'rating' => $lr->field_local_review_rating[LANGUAGE_NONE][0]['value'],
						'status' => 'active',
						'mgrtext' => $mgrtext,
						'mgrdate' => $mgrdate,
						'advancedurl' => array(),
						'data' => array('width' => $width, 'max' => 5)
					);

					$local_review_arr[] = $lr_item;

				}
					return $local_review_arr;

			}
		}
	}
	return null;
}
